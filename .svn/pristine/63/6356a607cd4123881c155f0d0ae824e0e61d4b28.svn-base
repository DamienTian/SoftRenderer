/*
Mesh.cpp 渲染对象
图形学自学任务
author：田昊

* 参考：BlauHimmel 一个简单光栅器的实现
*/

//#include "stdafx.h"
#include "Mesh.h"

Mesh::Mesh() {
	_verticesBuffer = nullptr;
	_verticesCount = 0;
	_indicesBuffer = nullptr;
	_indicesCount = 0;
}

Mesh::Mesh(_INT verticesCount, _INT indexCount) {
	_verticesCount = verticesCount;
	_verticesBuffer = new Vertex[_verticesCount];
	_indicesCount = indexCount;
	_indicesBuffer = new _INT[_indicesCount];
}

Mesh::Mesh(const Mesh& other) {
	_verticesCount = other._verticesCount;
	if (_verticesCount > 0) {
		// 清空之前的顶点缓存
		if (_verticesBuffer != nullptr) {
			delete[]_verticesBuffer;
			_verticesBuffer = nullptr;
		}
		_verticesBuffer = new Vertex[_verticesCount];
		for (int i = 0; i < _verticesCount; ++i) {
			_verticesBuffer[i] = other._verticesBuffer[i];
		}
	}
	_indicesCount = other._indicesCount;
	if (_indicesCount > 0) {
		// 清空之前的索引缓存
		if (_indicesBuffer != nullptr) {
			delete[]_indicesBuffer;
			_indicesBuffer = nullptr;
		}
		_indicesBuffer = new _INT[_indicesCount];
		for (int i = 0; i < _indicesCount; ++i) {
			_indicesBuffer[i] = other._indicesBuffer[i];
		}
	}
	else {
		if (_verticesBuffer != nullptr) {
			delete[]_verticesBuffer;
			_verticesBuffer = nullptr;
		}
		if (_indicesBuffer != nullptr) {
			delete[]_indicesBuffer;
			_indicesBuffer = nullptr;
		}
	}
}

Mesh::~Mesh()
{
	if (_verticesBuffer != nullptr) {
		delete[]_verticesBuffer;
		_verticesBuffer = nullptr;
	}
	if (_indicesBuffer != nullptr) {
		delete[]_indicesBuffer;
		_indicesBuffer = nullptr;
	}
}

void Mesh::InitBound(AABB * bound) {
	_bound = bound;
	// 根据加入的 mesh 顶点更新包围盒的大小
	Vector4 minPos = _verticesBuffer[0]._position;
	Vector4 maxPos = _verticesBuffer[0]._position;
	for (int i = 1; i < _verticesCount; i++) {
		Vector4 curr = _verticesBuffer[i]._position;
		if (minPos._x > curr._x) { minPos._x = curr._x; }
		if (minPos._y > curr._y) { minPos._y = curr._y; }
		if (minPos._z > curr._y) { minPos._z = curr._z; }
		if (maxPos._x < curr._x) { maxPos._x = curr._x; }
		if (maxPos._y < curr._y) { maxPos._y = curr._y; }
		if (maxPos._z < curr._y) { maxPos._z = curr._z; }
	}
	bound->_vMin = minPos;
	bound->_vMax = maxPos;
	bound->_center = (bound->_vMin + bound->_vMax) * 0.5f;
}

bool Mesh::ReadInOBJ(const char * path) {
	using std::cout;
	using std::endl;
	using std::vector;

	// 临时存储从 OBJ 读取的数据
	vector<Vertex> verticesBuffer;
	vector<Vector2> textCoordsBuffer;
	vector<Vector3> normalsBuffer;
	vector<_INT> indicesBuffer;

	_INT verticesCount = 0, textCoordsCount = 0, normalsCount = 0, indicesCount = 0;

	// 打开文件并读取
	FILE * file = fopen(path, "r");
	if (file == nullptr) {
		cout << "OBJ 文件打开失败" << endl;
		return false;
	}
	else{
		char lineReader[256];

		while (true) {
			int scanResult = fscanf(file, "%s", lineReader);
			if (scanResult == EOF) {
				break;
			}
			// 处理顶点信息
			//	NOTE：在这里初始化并存入顶点，之后在读到面数据（f）时，改动已读入的顶点
			if (strcmp(lineReader, "v") == 0) {
				Vertex inputVertex;
				_FLOAT x, y, z;
				scanResult = fscanf(file, "%f %f %fn", &x, &y, &z);
				if (scanResult != 3) {
					cout << "错误 - 顶点位置数据不完整：位于第 " << verticesCount << " 个 v" << endl;
					return false;
				}

				// 存入暂存空间
				inputVertex._position = Vector4(x, y, z, 1.0f);
				verticesBuffer.push_back(inputVertex);
				verticesCount++;
			}
			else if (strcmp(lineReader, "vt") == 0) {
				_FLOAT u, v;
				scanResult = fscanf(file, "%f %fn", &u, &v);
				if (scanResult != 2) {
					cout << "错误 - 纹理坐标数据不完整：位于第 " << verticesCount << " 个 vt" << endl;
					return false;
				}
				// 存入暂存空间
				textCoordsBuffer.push_back(Vector2(u, v));
				textCoordsCount++;
			}
			else if (strcmp(lineReader, "vn") == 0) {
				_FLOAT x, y, z;
				scanResult = fscanf(file, "%f %f %fn", &x, &y, &z);
				if (scanResult != 3) {
					cout << "错误 - 法线数据不完整：位于第 " << verticesCount << " 个 vn"<< endl;
					return false;
				}
				// 存入暂存空间
				normalsBuffer.push_back(Vector3(x, y, z));
				normalsCount++;
			}
			else if (strcmp(lineReader, "f") == 0) {
				// 每个顶点的索引存储
				_INT v1, t1, n1;
				_INT v2, t2, n2;
				_INT v3, t3, n3;
				scanResult = fscanf(file, "%d/%d/%d %d/%d/%d %d/%d/%dn",
					&v1, &t1, &n1, &v2, &t2, &n2, &v3, &t3, &n3);

				// 给已存入的顶点赋值
				//vertexBuffer[v1].
				indicesBuffer.push_back(v1);
				indicesBuffer.push_back(v2);
				indicesBuffer.push_back(v3);
				indicesCount += 3;
			}
		}

		fclose(file);

		cout << "模型顶点数量：" << verticesCount << endl;
		for (auto i = 0; i < verticesCount; i++) {
			cout << i << " : "<< verticesBuffer[i]._position << endl;
		}
		cout << "纹理贴图坐标数量：" << textCoordsCount << endl;
		for (auto i = 0; i < textCoordsCount; i++) {
			cout << i << " : " << textCoordsBuffer[i] << endl;
		}
		cout << "顶点法线数量：" << normalsCount << endl;
		for (auto i = 0; i < normalsCount; i++) {
			cout << i << " : " << normalsBuffer[i] << endl;
		}
		cout << "顶点索引数量：" << indicesCount << endl;
		for (auto i = 0; i < indicesCount; i++) {
			cout << i << " : " << indicesBuffer[i] << endl;
		}

	}
	
	return true;
}